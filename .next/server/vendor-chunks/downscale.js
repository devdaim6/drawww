"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/downscale";
exports.ids = ["vendor-chunks/downscale"];
exports.modules = {

/***/ "(ssr)/./node_modules/downscale/dist/downscale.js":
/*!**************************************************!*\
  !*** ./node_modules/downscale/dist/downscale.js ***!
  \**************************************************/
/***/ ((module, exports) => {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n/* downscale 1.0.6\n   Better image downscale with canvas.\n   https://github.com/ytiurin/downscale\n   Eugene Tiurin <yevhentiurin@gmail.com>\n   Under MIT license\n*/ (function(root, factory) {\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n})(void 0, function() {\n    function resizeWithCanvas(canvas, source, destWidth, destHeight, sourceX, sourceY, sourceWidth, sourceHeight) {\n        var canvas = document.createElement(\"canvas\");\n        canvas.width = destWidth;\n        canvas.height = destHeight;\n        var ctx = canvas.getContext(\"2d\");\n        ctx.mozImageSmoothingEnabled = true;\n        ctx.imageSmoothingQuality = \"high\";\n        ctx.webkitImageSmoothingEnabled = true;\n        ctx.msImageSmoothingEnabled = true;\n        ctx.imageSmoothingEnabled = true;\n        ctx.drawImage(source, sourceX, sourceY, sourceWidth, sourceHeight, 0, 0, destWidth, destHeight);\n        return canvas;\n    }\n    function round(val) {\n        return val + 0.49 << 0;\n    }\n    function downsample(sourceImageData, destWidth, destHeight, sourceX, sourceY, sourceWidth, sourceHeight) {\n        var dest = new ImageData(destWidth, destHeight);\n        var SOURCE_DATA = new Int32Array(sourceImageData.data.buffer);\n        var SOURCE_WIDTH = sourceImageData.width;\n        var DEST_DATA = new Int32Array(dest.data.buffer);\n        var DEST_WIDTH = dest.width;\n        var SCALE_FACTOR_X = destWidth / sourceWidth;\n        var SCALE_FACTOR_Y = destHeight / sourceHeight;\n        var SCALE_RANGE_X = round(1 / SCALE_FACTOR_X);\n        var SCALE_RANGE_Y = round(1 / SCALE_FACTOR_Y);\n        var SCALE_RANGE_SQR = SCALE_RANGE_X * SCALE_RANGE_Y;\n        for(var destRow = 0; destRow < dest.height; destRow++){\n            for(var destCol = 0; destCol < DEST_WIDTH; destCol++){\n                var sourceInd = sourceX + round(destCol / SCALE_FACTOR_X) + (sourceY + round(destRow / SCALE_FACTOR_Y)) * SOURCE_WIDTH;\n                var destRed = 0;\n                var destGreen = 0;\n                var destBlue = 0;\n                var destAlpha = 0;\n                for(var sourceRow = 0; sourceRow < SCALE_RANGE_Y; sourceRow++)for(var sourceCol = 0; sourceCol < SCALE_RANGE_X; sourceCol++){\n                    var sourcePx = SOURCE_DATA[sourceInd + sourceCol + sourceRow * SOURCE_WIDTH];\n                    destRed += sourcePx << 24 >>> 24;\n                    destGreen += sourcePx << 16 >>> 24;\n                    destBlue += sourcePx << 8 >>> 24;\n                    destAlpha += sourcePx >>> 24;\n                }\n                destRed = round(destRed / SCALE_RANGE_SQR);\n                destGreen = round(destGreen / SCALE_RANGE_SQR);\n                destBlue = round(destBlue / SCALE_RANGE_SQR);\n                destAlpha = round(destAlpha / SCALE_RANGE_SQR);\n                DEST_DATA[destCol + destRow * DEST_WIDTH] = destAlpha << 24 | destBlue << 16 | destGreen << 8 | destRed;\n            }\n        }\n        return dest;\n    }\n    function createTiming(enabled, source, destWidth, destHeight) {\n        var start = new Date;\n        var timing = {};\n        var prev = start;\n        var n = \"01\";\n        return {\n            mark: enabled ? function(name) {\n                name = n + \". \" + (name || \"...\");\n                timing[name] = {\n                    \"time (ms)\": new Date - prev\n                };\n                prev = new Date;\n                n = (\"0\" + ((n >> 0) + 1)).substr(-2);\n            } : new Function,\n            finish: enabled ? function() {\n                timing[n + \" TOTAL\"] = {\n                    \"time (ms)\": new Date - start\n                };\n                console.log(\"IMAGE SOURCE:\", source);\n                console.log(\"DOWNSCALE TO:\", destWidth + \"x\" + destHeight);\n                console.table(timing);\n            } : new Function\n        };\n    }\n    function createCache() {\n        var keys = [];\n        var values = [];\n        var subscribes = [];\n        var PENDING = new Object;\n        return {\n            createSetter: function(key) {\n                if (this.get(key)) {\n                    return;\n                }\n                var cacheInd = keys.push(key) - 1;\n                values.push(PENDING);\n                subscribes.push([]);\n                return function(value) {\n                    values[cacheInd] = value;\n                    subscribes[cacheInd] = subscribes[cacheInd].reduce(function(r, resolve) {\n                        resolve(value);\n                    }, []);\n                };\n            },\n            get: function(key, resolve) {\n                var cacheInd = keys.indexOf(key);\n                if (!~cacheInd) {\n                    return;\n                }\n                if (values[cacheInd] === PENDING) {\n                    subscribes[cacheInd].push(resolve);\n                    return;\n                }\n                resolve(values[cacheInd]);\n            },\n            has: function(key) {\n                return !!~keys.indexOf(key);\n            }\n        };\n    }\n    function getImageData(canvas, img, sourceWidth, sourceHeight) {\n        canvas.width = sourceWidth;\n        canvas.height = sourceHeight;\n        var ctx = canvas.getContext(\"2d\");\n        ctx.drawImage(img, 0, 0);\n        return ctx.getImageData(0, 0, sourceWidth, sourceHeight);\n    }\n    function putImageData(canvas, imageData) {\n        canvas.width = imageData.width;\n        canvas.height = imageData.height;\n        var ctx = canvas.getContext(\"2d\");\n        ctx.putImageData(imageData, 0, 0);\n        return canvas;\n    }\n    function remapDimensions(destWidth, destHeight, sourceX, sourceY, sourceWidth, sourceHeight) {\n        var origSourceWidth = sourceWidth;\n        var origSourceHeight = sourceHeight;\n        var sourceRatio = sourceWidth / sourceHeight;\n        if (destWidth === 0) {\n            destWidth = destHeight * sourceRatio >> 0;\n        }\n        if (destHeight === 0) {\n            destHeight = destWidth / sourceRatio >> 0;\n        }\n        var destRatio = destWidth / destHeight;\n        if (destRatio > sourceRatio) {\n            sourceHeight = sourceWidth / destRatio >> 0;\n        } else {\n            sourceWidth = sourceHeight * destRatio >> 0;\n        }\n        var sourceX = sourceX || (origSourceWidth - sourceWidth) / 2 >> 0;\n        var sourceY = sourceY || (origSourceHeight - sourceHeight) / 2 >> 0;\n        return {\n            destWidth: destWidth,\n            destHeight: destHeight,\n            sourceX: sourceX,\n            sourceY: sourceY,\n            sourceWidth: sourceWidth,\n            sourceHeight: sourceHeight\n        };\n    }\n    function produceResult(canvas, options, callback) {\n        if (options.returnCanvas) {\n            callback(canvas);\n            return;\n        }\n        if (options.returnBlob) {\n            canvas.toBlob(callback, \"image/\" + (options.imageType || \"jpeg\"), options.quality || .85);\n            return;\n        }\n        var dataURL = canvas.toDataURL(\"image/\" + (options.imageType || \"jpeg\"), options.quality || .85);\n        callback(dataURL);\n    }\n    function loadArrayBuffer(source, callback) {\n        var xhr = new XMLHttpRequest;\n        xhr.open(\"GET\", source);\n        xhr.responseType = \"arraybuffer\";\n        xhr.addEventListener(\"load\", function() {\n            callback(this.response);\n        });\n        xhr.send();\n    }\n    function loadImg(img, callback) {\n        if (img.complete) {\n            callback();\n        } else {\n            img.addEventListener(\"load\", callback);\n        }\n    }\n    function loadVideo(video, callback) {\n        if (video.readyState > 1) {\n            callback();\n        } else {\n            video.addEventListener(\"loadeddata\", callback);\n        }\n    }\n    function detectSourceType(source) {\n        if (source instanceof File) {\n            return \"File\";\n        }\n        if (source instanceof HTMLImageElement) {\n            return \"HTMLImageElement\";\n        }\n        if (source instanceof HTMLVideoElement) {\n            return \"HTMLVideoElement\";\n        }\n        if (typeof source === \"string\") {\n            return \"URL\";\n        }\n    }\n    function validateArguments(args) {\n        if (args.length < 3) {\n            return new TypeError(\"3 arguments required, but only \" + args.length + \" present.\");\n        }\n        if (!detectSourceType(args[0])) {\n            return new TypeError(\"First argument should be HTMLImageElement, HTMLVideoElement, File of String\");\n        }\n        if (typeof args[1] !== \"number\") {\n            return new TypeError(\"Second argument should be a number\");\n        }\n        if (typeof args[2] !== \"number\") {\n            return new TypeError(\"Third argument should be a number\");\n        }\n    }\n    function downscale(source, destWidth, destHeight, options) {\n        var timing = createTiming(options && options.debug || false, source, destWidth, destHeight);\n        var err = validateArguments(arguments);\n        if (err instanceof TypeError) {\n            return Promise.reject(err);\n        }\n        options = options || {};\n        var resolveResult, rejectResult;\n        var result = new Promise(function(resolve, reject) {\n            resolveResult = resolve;\n            rejectResult = reject;\n        });\n        downscale.canvas = downscale.canvas || document.createElement(\"canvas\");\n        downscale.cache = downscale.cache || createCache();\n        var canvas = downscale.canvas;\n        var cache = downscale.cache;\n        if (cache.has(source)) {\n            timing.mark();\n            cache.get(source, function(cacheData) {\n                timing.mark(\"PENDING CACHE\");\n                var img = cacheData[0];\n                var imageData = cacheData[1];\n                var dims = remapDimensions(destWidth, destHeight, options.sourceX, options.sourceY, imageData.width, imageData.height);\n                if (dims.sourceWidth / dims.destWidth >= 2 && dims.sourceHeight / dims.destHeight >= 2) {\n                    timing.mark();\n                    var destImageData = downsample(imageData, dims.destWidth, dims.destHeight, dims.sourceX, dims.sourceY, dims.sourceWidth, dims.sourceHeight);\n                    timing.mark(\"DOWNSCALE\");\n                    canvas = putImageData(canvas, destImageData);\n                } else {\n                    canvas = resizeWithCanvas(canvas, img, dims.destWidth, dims.destHeight, dims.sourceX, dims.sourceY, dims.sourceWidth, dims.sourceHeight);\n                    timing.mark(\"RESIZE WITH CANVAS\");\n                }\n                produceResult(canvas, options, function(result) {\n                    timing.mark(\"PRODUCE RESULT\");\n                    resolveResult(result);\n                    timing.finish();\n                });\n            });\n            return result;\n        }\n        var scaleSourceResolve = function(source, width, height) {\n            var dims = remapDimensions(destWidth, destHeight, options.sourceX, options.sourceY, width, height);\n            if (dims.sourceWidth / dims.destWidth >= 2 && dims.sourceHeight / dims.destHeight >= 2) {\n                timing.mark();\n                var imageData = getImageData(canvas, source, width, height);\n                timing.mark(\"GET IMAGE DATA\");\n                var destImageData = downsample(imageData, dims.destWidth, dims.destHeight, dims.sourceX, dims.sourceY, dims.sourceWidth, dims.sourceHeight);\n                timing.mark(\"DOWNSCALE\");\n                canvas = putImageData(canvas, destImageData);\n                if (detectSourceType(source) !== \"HTMLVideoElement\") {\n                    cache.createSetter(source)([\n                        source,\n                        imageData\n                    ]);\n                }\n            } else {\n                canvas = resizeWithCanvas(canvas, source, dims.destWidth, dims.destHeight, dims.sourceX, dims.sourceY, dims.sourceWidth, dims.sourceHeight);\n                timing.mark(\"RESIZE WITH CANVAS\");\n            }\n            produceResult(canvas, options, function(result) {\n                timing.mark(\"PRODUCE RESULT\");\n                resolveResult(result);\n                timing.finish();\n            });\n        };\n        var URL = window.URL || window.webkitURL;\n        switch(detectSourceType(source)){\n            case \"File\":\n                var sourceImg = document.createElement(\"img\");\n                timing.mark();\n                sourceImg.src = URL.createObjectURL(source);\n                timing.mark(\"READ FILE\");\n                loadImg(sourceImg, function() {\n                    timing.mark(\"LOAD IMAGE\");\n                    scaleSourceResolve(sourceImg, sourceImg.naturalWidth, sourceImg.naturalHeight);\n                });\n                break;\n            case \"HTMLImageElement\":\n                timing.mark();\n                loadImg(source, function() {\n                    timing.mark(\"LOAD IMAGE\");\n                    scaleSourceResolve(source, source.naturalWidth, source.naturalHeight);\n                });\n                break;\n            case \"HTMLVideoElement\":\n                loadVideo(source, function() {\n                    scaleSourceResolve(source, source.videoWidth, source.videoHeight);\n                });\n                break;\n            case \"URL\":\n                timing.mark();\n                setTimeout(function() {\n                    loadArrayBuffer(source, function(arrayBuffer) {\n                        timing.mark(\"LOAD ARRAY BUFFER\");\n                        var arrayBufferView = new Uint8Array(arrayBuffer);\n                        var blob = new Blob([\n                            arrayBufferView\n                        ], {\n                            type: \"image/jpeg\"\n                        });\n                        var sourceImg = document.createElement(\"img\");\n                        sourceImg.src = URL.createObjectURL(blob);\n                        timing.mark();\n                        loadImg(sourceImg, function() {\n                            timing.mark(\"LOAD IMAGE\");\n                            scaleSourceResolve(sourceImg, sourceImg.naturalWidth, sourceImg.naturalHeight);\n                        });\n                    });\n                });\n                break;\n        }\n        return result;\n    }\n    return downscale;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/downscale/dist/downscale.js\n");

/***/ })

};
;